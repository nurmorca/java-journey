// some concurrent methods

-- java.util.concurrent.ExecutorService:
   -> public void shutdown(): shuts down the executor, allows tasks currently in the
      pool to be completed. new threads are not accepted to the pool.
      
   -> public List<Runnable> shutdownNow(): shuts everything down immediately, returns them
      in a list.
      
   -> public boolean isShutdown(): returns true if the executor is shut down.
   
   -> public boolean isTerminated(): returns true if all the tasks are finished in the pool.
    
-- java.util.concurrent.Executor:
   -> public void execute(Runnable object): executes given task.

-- java.util.concurrent.Executors:
   -> public static ExecutorService newFixedThreadPool(nThreads:int): creates a thread pool that
      reuses a fixed number of threads.
      
   -> public static ExecutorService newCahcedThreadPool(): creates a thread pool that creates new threads
      as needed, but will reuse previously constructed threads when they are available.     
     